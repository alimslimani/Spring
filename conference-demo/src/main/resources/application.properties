#application
spring.application.name=conference-demo
app.version=1.0.0
server.port=${port_number}
#PostgreSQL
spring.datasource.url=${DB_URL}
spring.datasource.username=${db_username}
spring.datasource.password=${db_pwd}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#Lob: for treatment a binary field with a large volume of data
spring.jpa.hibernate.jdbc.lob.non_contextual_creation=true
#Log file
logging.level.com.alm.highfi.conferencedemo=TRACE
logging.file.name=logs/conference-demo.log
#Actuator
management.endpoints.web.base.exposure.include=info,health,metrics,loggers,beans,mappings
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
#Oauth2 with spring 2.2
spring.security.oauth2.client.registration.[registrationId].client-id=${clientId}
spring.security.oauth2.client.registration.[registrationId].client-secret=${clientSecret}
spring.security.oauth2.client.registration.[registrationId].client-name=Auth Server
spring.security.oauth2.client.registration.[registrationId].scope=${scope}
spring.security.oauth2.client.registration.[registrationId].provider=custom-provider
spring.security.oauth2.client.registration.[registrationId].redirect-uri=http://localhost:${port_number}/login/oauth2/code/
spring.security.oauth2.client.registration.[registrationId].client-authentication-method=basic
spring.security.oauth2.client.registration.[registrationId].authorization-grant-type=authorization_code
